-----------------------------------------------------
LEVEL SOLUTIONS
-----------------------------------------------------
LEVEL 1
-----------------------------------------------------

player.MoveRight()
player.MoveRight()
player.MoveDown()
player.MoveDown()

-----------------------------------------------------
LEVEL 2
-----------------------------------------------------

while(true) do
	if player.CanMove("right") then
		player.MoveRight()
	end
	if player.CanMove("down") then
		player.MoveDown()
	end
end

-----------------------------------------------------
LEVEL 3
-----------------------------------------------------

while(true) do
	player.MoveRight()
	player.MoveRight()
	player.MoveUp()
	player.MoveUp()
	player.MoveRight()
	player.MoveRight()
	player.MoveDown()
	player.MoveDown()
end

-----------------------------------------------------
LEVEL 4
-----------------------------------------------------

for i = 0, 4, 1 do
	player.MoveRight()
end

for i = 0, 4, 1 do
	player.MoveDown()
end

for i = 0, 4, 1 do
	player.MoveLeft()
end

for i = 0, 2, 1 do
	player.MoveUp()
end

for i = 0, 2, 1 do
	player.MoveRight()
end

-----------------------------------------------------
LEVEL TUTORIAL SCRIPTS
-----------------------------------------------------
LEVEL 1
-----------------------------------------------------

ELEMENT 0:
-------------
<size=82>Level 1: Introduction & Movement</size>

In the tutorial for this level, you will learn about the basic movement commands for the player.

Please click the next button to continue.

ELEMENT 1:
-------------
<size=82>Introduction</size>

First things first, you will need to know what you will be doing in this game. You will play as the small red square, and your objective is to reach the large red tile in each level. You will achieve this by writing Lua code in the dark blue terminal to the right of the screen.

ELEMENT 2:
-------------
<size=82>Introduction</size>

Each level you reach will teach you a new concept of programming in Lua, which you will then need to make use of to complete that level.
When you have written your code, you can test your solution by clicking the 'Run Script' button. If any errors show up in your code, the large orange box will display them.

ELEMENT 3:
------------
<size=82>Introduction</size>

The 'Reset' button can be used to cancel the execution of your script early, and move your square back to the starting tile of the level.

Some levels may also contain some starting code for you to get started with, along with various comments containing different hints.

ELEMENT 4:
------------
<size=82>Introduction</size>

Finally, if you ever want to re-open these tutorial windows on each level, you can click on the 'i' button to do so.

ELEMENT 5:
------------
<size=82>Player Movement</size>

Now that you know the basics of the game, the remainder of this tutorial will teach you how to move your player around each level.

To complete this level, you will need to move the player right two tiles, then down two tiles to reach the red tile.

ELEMENT 6:
------------
<size=82>Player Movement</size>

Firstly, your player square can be used in Lua through the 'player' object. This will allow you to call various functions attatched to this object, such as moving. For this level, you will be using MoveRight(), and MoveDown(). Example:

	player.MoveRight()
	player.MoveDown()

ELEMENT 7:
------------
<size=82>Player Movement</size>

Try complete this level by using the MoveRight and MoveLeft functions on the player to move your player square onto the red tile. Remember, you can open these tutorials again by clicking on the 'i' button in the top left corner of the screen!

GOOD LUCK!         <size=32>Click the 'Done' button to close this window.</size>

------------------------------------------------
LEVEL 2:
------------------------------------------------

ELEMENT 0:
------------
<size=82>Level 2: IF Statements</size>

In this tutorial, you will learn about and use 'IF' statements to complete this level.

Please click the next button to continue.

ELEMENT 1:
------------
<size=82>What is an 'IF' statement?</size>

An 'IF' statement is a programming conditional statement that if proven true, will run code found within it. In English, an if statement would read like this:
           if 'some condition' is true then
                   run some code here
           end of if statement

ELEMENT 2:
------------
<size=82>Lua Example</size>

This is an actual example of an if statement in Lua.

aNumber = 10
if (aNumber == 10) then
	print "Condition was true!"
end

ELEMENT 3:
------------
<size=82>Explanation</size>

In the previous example, a variable, which is basically a way of storing some data, was created and given the value 10 (Using '=' on a variable sets its value). The if statement then checks if the value of the variable is 10 ('==' is the same as saying is equal to). If that condition was true, it runs the code found between the if statement and the 'end' keyword.

ELEMENT 4:
------------
<size=82>New Player Function!</size>

In this level, you will need to utilize a new player function. This function is found inside the player object, just like the move functions from the previous level, however, this function requires something called a parameter.

ELEMENT 5:
------------
<size=82>Parameters</size>

Parameters are pieces of information you can pass to a function. In this level, you will use the CanMove(string) function (A string is a bunch of characters).
Example:
	player.CanMove("left")
The function will return a true or false value based on if the player is able to move in the given direction.

ELEMENT 6:
------------
<size=82>Objectives!</size>

Using what you have learnt in this tutorial, move your player square to the red tile. Some code has been provided to get you started.


-------------------------------------------------
LEVEL 3
-------------------------------------------------

ELEMENT 0:
------------
<size=82>Level 3: while loops!</size>

In this tutorial, you will learn about, and use while loops to complete this level.

Please click the next button to continue.

ELEMENT 1:
------------
<size=82>What are while loops?</size>

A while loop, similar to if statements are conditional based expression where while the loops condition is evaluated to be true, the code within the loop block will be run over and over.

ELEMENT 2:
------------
<size=82>Lua Example:</size>

condition = true
while(condition == true) do
	print "I will be printed forever!"
end

ELEMENT 3:
------------
<size=82>Example #2:</size>

while(true) do
	player.MoveRight()
end

In this example, the player will move right forever, as the condition will always be true! If you want to exit a loop early, then you can use the 'break' keyword.

ELEMENT 4:
------------
<size=82>Break keyword</size>

while(true) do
	break
end

This loop will instantly be terminated because of the break keyword, regardless of the condition.

ELEMENT 5:
------------
<size=82>Objectives!</size>

Using a while loop, reach the red tile in this level! 
As an extra challenge, you must complete this level in less than 10 lines of code! Good Luck!


-------------------------------------------------
LEVEL 4
-------------------------------------------------

ELEMENT 0:
------------
<size=82>Level 4: For loops!</size>

In this tutorial, you will learn about, and use for loops to complete this level.

Please click the next button to continue.

ELEMENT 1:
------------
<size=82>What are for loops?</size>

For loops are slightly more complicated than while loops. For loops start with an initial value, a max/min value, followed by the increment for each loop iteration.
In English: for some start value, some target value, increment value by this much each iteration.
The next page will show you an example.

ELEMENT 2:
------------
<size=82>For loop Example:</size>

for value = 0, 10, 1 do
	player.MoveRight()
end

In this example, the player will move right 10 times. The next page will explain in more detail how.

ELEMENT 3:
------------
<size=82>Explanation</size>

The variable 'value' is set to 0 to begin with. The second integer (10) is the target value for the variable 'value', and the final value (1) is how much the variable 'value' will increment by each iteration of the loop. This value can also be a negative number(such as -1) if you want to count backwards!

ELEMENT 4:
------------
<size=82>Objectives!</size>

Using 5 for loops, complete this level. The first for loop has been provided for you!
You must also complete this level in no more than 15 lines of code!
Remember to look back at this tutorial if you get stuck!.

-------------------------------------------------
LEVEL 5
-------------------------------------------------

ELEMENT 0:
------------
<size=82>Level 5: Final Level!</size>

Congratulations on reaching the final level of the game! In this level you will be utilizing everything you have learnt throughout the previous levels to complete the objectives for this level.

Please click the next button to continue.

ELEMENT 1:
------------
<size=82>Final Level</size>

This tutorial won't be teaching you anything new. You will use what you have learnt from previous levels instead. The following pages will provide you with examples of everything you have learnt in previous tutorials for you to look back at if you need.

ELEMENT 2:
------------
<size=82>IF Statements</size>

if player.CanMove("left") then
	player.MoveLeft()
end

Move the player left if it can.

ELEMENT 3:
------------
<size=82>While Loops</size>

while(true) do
	player.MoveRight()
	player.MoveLeft()
end

Move the player right then left forever.

ELEMENT 4:
------------
<size=82>For Loops</size>

for i = 0, 2, 1 do
	player.MoveUp()
end

Move the player up two times.

ELEMENT 5:
------------
<size=82>Objectives!</size>

How you complete this level is entirely up to you, and is your chance to test yourself on what you have learnt!
The only requirement for this level is that you must complete it in under 25 lines of code! 

GOOD LUCK!



















